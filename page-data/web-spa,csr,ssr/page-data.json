{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/web-spa,csr,ssr/",
    "result": {"data":{"cur":{"id":"0dbc052c-d647-5f19-99b5-c78d0865923f","html":"<h2 id=\"static-website정적인-웹사이트\" style=\"position:relative;\"><a href=\"#static-website%EC%A0%95%EC%A0%81%EC%9D%B8-%EC%9B%B9%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"static website정적인 웹사이트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Website(정적인 웹사이트)</h2>\n<ul>\n<li>화면에 보이는 컨텐츠 그대로 html 파일에 작성되어있어서, 서버에 저장된 html 파일 그대로 브라우저에 보이는 것.</li>\n<li>주로사용자 및 시간에 따라 항상 똑같은 내용을 보여주는 사이트는 static website로 만드는게 적합하다.</li>\n<li>ex) 회사 소개 페이지, 반복이 없는 포트폴리오 페이지, gatsby 블로그 등</li>\n</ul>\n<br/>\n<h2 id=\"dynamic-website\" style=\"position:relative;\"><a href=\"#dynamic-website\" aria-label=\"dynamic website permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Website</h2>\n<ul>\n<li>\n<p>서버에 저장된 html 파일이 그대로 브라우저에 그려지는 것이 아니라, 다이나믹하게(=동적으로) html 파일이 만들어지는 것이다. 요즘 대부분의 웹사이트가 dynamic website이다.\n<img src=\"https://user-images.githubusercontent.com/67889389/166934040-6f22c813-bcef-41af-b874-a721e1932d5e.png\" alt=\"dynamic-website\"></p>\n</li>\n<li>\n<p>예를 들어, airbnb 사이트에서 어제 접속하고, 오늘 접속할 때마다 추천 숙소 목록이 바뀐다. 목록 디자인은 그대로인데, 숙소 목록 데이터가 바뀌는 것은 Dynamic Website이기 때문이다.</p>\n</li>\n</ul>\n<br/>\n<h2 id=\"spa-single-page-application\" style=\"position:relative;\"><a href=\"#spa-single-page-application\" aria-label=\"spa single page application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SPA (Single Page Application)</h2>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166934647-cb08c583-8246-466b-8cdf-af7826a6f000.png\" alt=\"spa\"></p>\n<ul>\n<li>하나의 파일로 전체 사이트(=여러 페이지)를 구현. 즉, 단일의 html 페이지에서 전체 웹 사이트/서비스를 구현.</li>\n<li>npm run build ⇒ html 파일 하나 생김 (ex. AWS 배포할 때)</li>\n<li>HTML 태그 자체를 자바스크립트가 동적으로 생성. 즉, 페이지를 이동하려고 하면 자바스크립트 내의 특정 함수를 타서 <code class=\"language-text\">&lt;div id=\"root\" /></code> 의 내용을 싹 교체하는 것이다.</li>\n<li>서버로부터 html 자체를 받아서 페이지를 바꾸는게 아니다.</li>\n<li>페이지 이동 시 화면 깜빡임 X</li>\n</ul>\n<br/>\n<h2 id=\"csr-client-side-rendering\" style=\"position:relative;\"><a href=\"#csr-client-side-rendering\" aria-label=\"csr client side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSR (Client Side Rendering)</h2>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166938057-e663f154-ad7e-4752-b8dd-4803c83d97d1.png\" alt=\"csr\"></p>\n<ul>\n<li>웹 페이지의 렌더링이 클라이언트(브라우저) 측에서 일어나는 것을 의미.</li>\n<li>브라우저는 최초 요청에서 html, js, css 확장자의 파일을 차례로 다운로드.</li>\n<li>최초로 불러온 html의 내용은 비어있음. (html, body 태그만 존재) - <code class=\"language-text\">public/index.html</code></li>\n<li>js 파일의 다운로드가 완료된 다음, 해당 js 파일이 dom을 빈 html 위에 그리기 시작.</li>\n<li>웹서버 호출을 최소화 할 수 있음\n<ul>\n<li>최초 호출 때만 html, js, css를 요청</li>\n<li>이후에는 화면에서 변화가 일어나야 하는 만큼의 데이터만 요청 (ex. AJAX/JSON)</li>\n</ul>\n</li>\n<li>라우팅(새로운 페이지로 이동)을 하더라도 html 자체가 바뀌는 것이 아니라 JavaScript 차원에서 새로운 화면을 그려내는 것이다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166936001-cb11ae1b-0613-4944-8824-ca3b6bf0b3b3.png\" alt=\"cra\"></p>\n<br/>\n<h3 id=\"create-react-app-cra--only-csr\" style=\"position:relative;\"><a href=\"#create-react-app-cra--only-csr\" aria-label=\"create react app cra  only csr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create React App (CRA) ← Only CSR</h3>\n<ul>\n<li>Create React apps with no build configuration.\n<ul>\n<li>별도의 초기 설정 없이도 CRA를 통해 React 기반의 SPA 사이트를 구현할 수 있게 됨. 하지만, CRA로 build한 프로젝트는 SEO (Search Engine Optimization)에 문제가 있다\n-SPA의 장점을 살리면서 SEO도 같이 챙기기 위해서 SSR (Server Side Rendering)이 다시 부각되었다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h3 id=\"cra에서의-seo\" style=\"position:relative;\"><a href=\"#cra%EC%97%90%EC%84%9C%EC%9D%98-seo\" aria-label=\"cra에서의 seo permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRA에서의 SEO</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166937389-d577ed3a-3df0-4f0a-9d4b-51d56f1e9c97.png\" alt=\"cra-seo\"></p>\n<blockquote>\n<p><a href=\"https://github.com/nfl/react-helmet\">https://github.com/nfl/react-helmet</a></p>\n</blockquote>\n<br/>\n<h2 id=\"ssr-server-side-rendering\" style=\"position:relative;\"><a href=\"#ssr-server-side-rendering\" aria-label=\"ssr server side rendering permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSR (Server Side Rendering)</h2>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166938086-86673305-464c-45fc-86cf-a6a2ca8d1fb4.png\" alt=\"ssr\"></p>\n<ul>\n<li>-SSR은 서버에서 첫 페이지의 렌더링을 클라이언트 측이 아닌 서버 측에서 처리해주는 방식이다.</li>\n<li>CSR과 비교하면 SEO 측면에서 유리하다. 서버에서 사용자에게 보여줄 페이지를 모두 구성하여 사용자에게 보여주는 방식이기 때문에 CSR의 단점인 “첫 페이지 깡통” 상태를 극복할 수 있다.</li>\n<li>UX 측면에서 유리하다. CSR에 비해 페이지를 구성하는 속도는 늦어지지만, 전체적으로 사용자에게 보여주는 콘텐츠 구성이 완료되는 시점은 빨라진다.\n<ul>\n<li>주의) 페이지를 잘못 구성할 경우 CSR에 비해 서버 부하가 커지거나 / 첫 로딩이 매우 느려질 수 있음</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"ssr-for-mpa-ssr-for-spa\" style=\"position:relative;\"><a href=\"#ssr-for-mpa-ssr-for-spa\" aria-label=\"ssr for mpa ssr for spa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSR for MPA, SSR for SPA</h2>\n<p>흔히 말하는 2세대 웹인 JSP, PHP, Django Template 같은 것들 역시 SSR이였다. 하지만, CSR의 한계를 극복하기 위해 웹이 2세대 기술로 돌아가고 있는것은 아니다. 또한, SPA랑 CSR이랑 같은 의미가 절대 아니다.</p>\n<br/>\n<h2 id=\"csr--ssr--nextjs-like-cra\" style=\"position:relative;\"><a href=\"#csr--ssr--nextjs-like-cra\" aria-label=\"csr  ssr  nextjs like cra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSR + SSR? ⇒ Next.js (like CRA)</h2>\n<ul>\n<li>현재 CSR + SSR을 섞어 쓸 수 있고, 생산성이 좋은 Next.js가 주로 채택된다.</li>\n<li>SSR의 CRA, 간단히 구성 가능</li>\n<li>ex) 토스, 배민, 카카오커머스 등 사용 중</li>\n</ul>\n<blockquote>\n<p><a href=\"https://nextjs.org/\">Next.js by Vercel - The React Framework</a></p>\n</blockquote>\n<br/>\n<h3 id=\"nextjs-원리--구조\" style=\"position:relative;\"><a href=\"#nextjs-%EC%9B%90%EB%A6%AC--%EA%B5%AC%EC%A1%B0\" aria-label=\"nextjs 원리  구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js 원리 &#x26; 구조</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166942158-92dccc82-793c-4898-9dc3-ba5728e6f01b.png\" alt=\"next js\"></p>\n<ul>\n<li>SSR은 다음과 같은요소로 기본적으로 구성된다\n<ul>\n<li>node.js로 구성된 (서버사이드에서 렌더링을 해주는) FE 서버</li>\n<li>pyhton, django로 되어 있는 (데이터를 주고 받는) BE 서버</li>\n</ul>\n</li>\n<li>다음과 같은 과정을 거쳐 SSR이 진행된다\n<ol>\n<li>유저가 브라우저에 <code class=\"language-text\">/</code>를 입력.</li>\n<li>미리 실행되고 있는 FE 서버가 요청을 받고 서버사이드 렌더링.</li>\n<li>만들어진 html 을 브라우저에게 보냄.</li>\n<li>브라우저가 응답받은 html 을 그림.</li>\n<li>html 에 기능을 부여할 <code class=\"language-text\">index.js</code>파일을 다운로드 받음. (hydration)</li>\n</ol>\n</li>\n</ul>\n<br/>\n<h3 id=\"nextjs의-장점\" style=\"position:relative;\"><a href=\"#nextjs%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"nextjs의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js의 장점</h3>\n<ul>\n<li>페이지 기반 라우팅 시스템 (동적 라우팅 지원)</li>\n<li>pre-rendering , 페이지별 정적파일 생성과 서버사이드 렌더링 지원</li>\n<li>코드 스플리팅</li>\n<li>CSS, Sass 기본 지원 및 다른 CSS-in-JS 라이브러리 지원</li>\n</ul>","excerpt":"Static Website(정적인 웹사이트) 화면에 보이는 컨텐츠 그대로 html 파일에 작성되어있어서, 서버에 저장된 html 파일 그대로 브라우저에 보이는 것. 주로사용자 및 시간에 따라 항상 똑같은 내용을 보여주는 사이트는 static website로 만드는게 적합하다. ex) 회사 소개 페이지, 반복이 없는 포트폴리오 페이지, gatsby 블로그 등 Dynamic Website 서버에 저장된 html 파일이 그대로 브라우저에 그려지는 것이 아니라, 다이나믹하게(=동적으로) html 파일이 만들어지는 것이다. 요즘 대부분의 웹사이트가 dynamic website이다.\ndynamic-website 예를 들어, airbnb 사이트에서 어제 접속하고, 오늘 접속할 때마다 추천 숙소 목록이 바뀐다. 목록 디자인은 그대로인데, 숙소 목록 데이터가 바뀌는 것은 Dynamic Website이기 때문이다. SPA (Single Page Application) spa 하나의 파일로 전체 사이…","frontmatter":{"date":"May 07, 2022","title":"SPA, CSR, SSR","categories":"web","author":"developjik","emoji":"⌨"},"fields":{"slug":"/web-spa,csr,ssr/"}},"next":{"id":"55499bb0-2d60-5c72-b1f3-27a79f434b4f","html":"<h2 id=\"검색-크롤러-기본-방식\" style=\"position:relative;\"><a href=\"#%EA%B2%80%EC%83%89-%ED%81%AC%EB%A1%A4%EB%9F%AC-%EA%B8%B0%EB%B3%B8-%EB%B0%A9%EC%8B%9D\" aria-label=\"검색 크롤러 기본 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>검색 크롤러 기본 방식</h2>\n<p>웹페이지를 방문하여 모든 링크를 찾은다음, 그 링크를 목록화 한다.\n그 다음 이 링크들을 이전에 방문한 적이 있는지 확인하고, 방문해본 적이 없으면 그 링크를 타고 웹페이지를 방문한다.\n그런 다음 그 페이지에서 앞에서 진행한 과정을 반복한다.</p>\n<br/>\n<h2 id=\"현재의-검색-알고리즘\" style=\"position:relative;\"><a href=\"#%ED%98%84%EC%9E%AC%EC%9D%98-%EA%B2%80%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"현재의 검색 알고리즘 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>현재의 검색 알고리즘</h2>\n<ul>\n<li>하나가 아닌 여러 개의 알고리즘으로 구성되어있다.</li>\n<li>모든 웹페이지의 수 많은 검색어, 모든 링크를 다 합친 것이 페이지랭크가 된다.</li>\n<li>실제로 링크를 누가 얼마나 클릭하는지도 중요하다</li>\n<li>크롤러가 웹페이지를 찾으면 Google 시스템에서는 브라우저와 마찬가지로 해당 페이지의 콘텐츠를 렌더링한다. 이때 키워드 및 웹사이트 최신 정보에 이르는 주요 신호를 기록하며 검색 색인에서 모든 주요 신호를 추적한다.</li>\n<li>키워드 검색과 웹페이지에 담긴 텍스트 비교, 반복성, 서체크기, 대문자, 키워드의 위치 등 여러가지 전통적인 정보검색기술과 결합한다.\n여기서 전통적인 판단 요소를 시그널(signal) 이라고하고 검색품질에 대단히 중요한 역할을 한다.</li>\n</ul>\n<br/>\n<h2 id=\"seosearch-engine-optimization-검색-최적화를-위해서-해야-될-것\" style=\"position:relative;\"><a href=\"#seosearch-engine-optimization-%EA%B2%80%EC%83%89-%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%B4%EC%84%9C-%ED%95%B4%EC%95%BC-%EB%90%A0-%EA%B2%83\" aria-label=\"seosearch engine optimization 검색 최적화를 위해서 해야 될 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SEO(Search Engine Optimization, 검색 최적화)를 위해서 해야 될 것</h2>\n<blockquote>\n<p>구글이 말하길 검색엔진 최적화의 효과를 보려면 시간이 다소 걸립니다.\n변경을 시작해서 성과가 나타날 때까지 보통 4개월에서 1년 정도 소요됩니다.</p>\n</blockquote>\n<h3 id=\"1-잘-노출-되게-한다\" style=\"position:relative;\"><a href=\"#1-%EC%9E%98-%EB%85%B8%EC%B6%9C-%EB%90%98%EA%B2%8C-%ED%95%9C%EB%8B%A4\" aria-label=\"1 잘 노출 되게 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 잘 노출 되게 한다.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166693203-55fd783d-0792-4ac5-9786-2f14a215558f.png\" alt=\"good-search-result\"></p>\n<br/>\n<ol>\n<li>\n<p>우리 사이트 주소가 여기저기서 링크 되고 있어야 한다.</p>\n<ol>\n<li>youtube도 올리고 페이스북도 올리고 인스타도 올리고 블로그도 쓰고 서로 링크하고(하지만 너무 recursive하면 광고로 판단하고 blocking한다)</li>\n<li>각 사이트(유투브, 페이스북 등)의 제목과 내용의 단어 선택을 잘 해야한다!</li>\n</ol>\n</li>\n<li>\n<p><code class=\"language-text\">head</code>에 페이지 정보를 잘 작성한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166693464-c921678b-91b6-4e6f-9902-029aae7da795.png\" alt=\"head\"></p>\n</li>\n<li>\n<p><code class=\"language-text\">robots.txt</code> 크롤러와 사이트의 약속\n<img src=\"https://user-images.githubusercontent.com/67889389/166693817-1819c78d-b41f-4c38-9b82-1af372e6ca31.png\" alt=\"robots txt\"></p>\n</li>\n<li>\n<p><code class=\"language-text\">sitemap.xml</code>\n<img src=\"https://user-images.githubusercontent.com/67889389/166693829-b6f57535-7ebf-449e-9a45-2ea5a1790deb.png\" alt=\"sitemap xml\"></p>\n</li>\n</ol>\n<h3 id=\"2-사이트를-컴퓨터가-이해할-수-있도록-만든다\" style=\"position:relative;\"><a href=\"#2-%EC%82%AC%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%9D%B4%ED%95%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EB%A7%8C%EB%93%A0%EB%8B%A4\" aria-label=\"2 사이트를 컴퓨터가 이해할 수 있도록 만든다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 사이트를 컴퓨터가 이해할 수 있도록 만든다.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166693798-1fb5f088-559d-4f19-b0bc-572014517d46.png\" alt=\"good-search-result2\"></p>\n<br/>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/166693826-9df9e015-4360-40da-ade7-b06f60371d23.png\" alt=\"semantic\"></p>\n<ol>\n<li>\n<p>HTML5 Semantic Elements</p>\n<ul>\n<li>페이지 이동 시 검색되길 바란다면 무조건 a 태그를 쓰기</li>\n<li><hn> 태그 잘 활용하기</li>\n<li>img 태그 alt 설명 잘 달기</li>\n<li>img 태그 사진 이름부터 잘 짓기</li>\n<li>img 태그 위에 figure 추가</li>\n<li>header, main, footer, nav, section, aside 등등 태그 잘 활용하기</li>\n<li>caption 태그 활용해서 table 설명쓰기</li>\n</ul>\n</li>\n</ol>\n<br/>\n<blockquote>\n<p>참조 : <a href=\"https://developers.google.com/search/docs/beginner/seo-starter-guide?hl=ko&#x26;visit_id=637664932657806093-2379697166&#x26;rd=1\">SEO 가이드</a></p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B2%80%EC%83%89-%ED%81%AC%EB%A1%A4%EB%9F%AC-%EA%B8%B0%EB%B3%B8-%EB%B0%A9%EC%8B%9D\">검색 크롤러 기본 방식</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%98%84%EC%9E%AC%EC%9D%98-%EA%B2%80%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">현재의 검색 알고리즘</a></p>\n</li>\n<li>\n<p><a href=\"#seosearch-engine-optimization-%EA%B2%80%EC%83%89-%EC%B5%9C%EC%A0%81%ED%99%94%EB%A5%BC-%EC%9C%84%ED%95%B4%EC%84%9C-%ED%95%B4%EC%95%BC-%EB%90%A0-%EA%B2%83\">SEO(Search Engine Optimization, 검색 최적화)를 위해서 해야 될 것</a></p>\n<ul>\n<li><a href=\"#1-%EC%9E%98-%EB%85%B8%EC%B6%9C-%EB%90%98%EA%B2%8C-%ED%95%9C%EB%8B%A4\">1. 잘 노출 되게 한다.</a></li>\n<li><a href=\"#2-%EC%82%AC%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%9D%B4%ED%95%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8F%84%EB%A1%9D-%EB%A7%8C%EB%93%A0%EB%8B%A4\">2. 사이트를 컴퓨터가 이해할 수 있도록 만든다.</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 04, 2022","title":"검색과 SEO","categories":"web","author":"developjik","emoji":"⌨"},"fields":{"slug":"/web-search-seo/"}},"prev":{"id":"87604ee0-1fec-5b8b-a817-7b421d4f2bd1","html":"<h2 id=\"웹팩\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%ED%8C%A9\" aria-label=\"웹팩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹팩</h2>\n<p>웹팩은 <code class=\"language-text\">모듈 번들러</code>이다!</p>\n<p>즉, 웹팩을 이해하기 위서는 “모듈”을 먼저 알아야한다.</p>\n<br/>\n<h2 id=\"모듈패턴과-필요성\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88%ED%8C%A8%ED%84%B4%EA%B3%BC-%ED%95%84%EC%9A%94%EC%84%B1\" aria-label=\"모듈패턴과 필요성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈패턴과 필요성</h2>\n<ul>\n<li>자바스크립트의 소스를 모듈 단위로 관리하거나 라이브러리 등을 만들 때 사용</li>\n<li>전역 변수의 사용을 최소화 하기 위함</li>\n<li>변수 scope을 지정해서 사용하기 위함</li>\n<li>Reusablility, Isolation, Organization</li>\n<li>모듈 단위로 소스를 개발하면 각 모듈 간의 의존성을 최소화하거나 의존성 파악하기 쉬움</li>\n</ul>\n<h2 id=\"모듈module\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88module\" aria-label=\"모듈module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈(module)</h2>\n<blockquote>\n<p>A module is one of the separate parts.</p>\n</blockquote>\n<ul>\n<li>자바스크립트에서의 모듈이란 기능이 구현된 “자바스크립트 개별 파일”이라고 생각하면 됩니다.</li>\n<li>잘 만든 모듈패턴은 하나의 파일이 하나의 모듈이 되며, 하나의 파일은 하나의 scope이 되도록 구현해야 합니다. 그래야 파일 내에서 변수도 자유롭게 선언할 수 있고, 관련 기능만 하나의 파일에 구현해서 다른 파일의 방해를 받지 않을 수 있게 됩니다.</li>\n<li>바닐라 자바스크립트에서의 모듈패턴은 scope 개념을 활용해서 직접 구현해야 하며, 다른 도움 없이는 모듈화 시스템을 구축할 수 없습니다. commonJS, AMD, ES2015 등을 통해서 모듈화 시스템을 사용할 수 있습니다. 프론트앤드에서 모듈화는 아주 예전부터 있던 개념이며, react가 없던 시절에도 모듈화를 사용했었습니다.</li>\n</ul>\n<br/>\n<h2 id=\"모듈-구현\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%EA%B5%AC%ED%98%84\" aria-label=\"모듈 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 구현</h2>\n<h3 id=\"옛날-방식\" style=\"position:relative;\"><a href=\"#%EC%98%9B%EB%82%A0-%EB%B0%A9%EC%8B%9D\" aria-label=\"옛날 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>옛날 방식</h3>\n<ul>\n<li>\n<p>네임스페이스 생성을 위해 모듈패턴을 사용함.</p>\n</li>\n<li>\n<p>라이브러리(CRA) 없이 모듈 패턴 구현할 때는 어떻게 했나?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 이렇게 감싸서 하나의 모듈을 만들 수 있습니다.</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// scope가 막혀있기 때문에 전역변수가 생성되지 않습니다.</span>\n    <span class=\"token comment\">// 즉시 실행함수는 보통 일회용 코드</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 모듈 또 하나</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\twindow<span class=\"token punctuation\">.</span>myLibrary <span class=\"token operator\">=</span> <span class=\"token comment\">/* */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 모듈 또 하나</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> math <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\twindow<span class=\"token punctuation\">.</span>math <span class=\"token operator\">=</span> math<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>Kakao 로그인할 때 Kakao가 하나의 네임스페이스라고 생각하시면 됩니다. 자바스크립트 라이브러리나 특정 회사의 외부 모듈의 용도를 명확하게 구분하고자 모듈 패턴을 확장하여 네임스페이스로 활용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">//kakao 코드 초반</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'undefined'</span> <span class=\"token operator\">:</span> <span class=\"token function\">_typeof</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> g<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> window <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      g <span class=\"token operator\">=</span> window<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> global <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      g <span class=\"token operator\">=</span> global<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> self <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      g <span class=\"token operator\">=</span> self<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      g <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    g<span class=\"token punctuation\">.</span>Kakao <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 내부 코드 */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<br/>\n<h3 id=\"모듈-기능-표준화-요즘-방식\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%93%88-%EA%B8%B0%EB%8A%A5-%ED%91%9C%EC%A4%80%ED%99%94-%EC%9A%94%EC%A6%98-%EB%B0%A9%EC%8B%9D\" aria-label=\"모듈 기능 표준화 요즘 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈 기능 표준화 (요즘 방식)</h3>\n<p><strong>ES Module</strong></p>\n<ul>\n<li>\n<p>자바스크립트를 이용하는 웹페이지의 코드가 복잡해지기 시작하면서 효율적인 소스 관리가 필요해져서 이제는 모듈을 정의하는 것 또한 표준으로 정의되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- IE는 아직 지원 안 됨. 사용하려면 type 속성 추가 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> fn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./module'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// module.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'모듈'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'익명함수'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>아직 IE지원이 안되므로, 모듈을 사용하려면 babel, webpack이 필요하다.</p>\n<ul>\n<li><code class=\"language-text\">babel</code>은 ES6 → 브라우저에서 사용할 수 있도록 모듈을 commonjs로 바꿔주고,</li>\n<li><code class=\"language-text\">webpack</code>은 모듈간의 의존성을 파악하여 자바스크립트 코드를 bundle(합쳐) 해준다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h2 id=\"번들러bundler\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EB%93%A4%EB%9F%ACbundler\" aria-label=\"번들러bundler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번들러(bundler)</h2>\n<blockquote>\n<p>bundle : 꾸러미, 묶음, 보따리</p>\n</blockquote>\n<ul>\n<li>번들이란 여러 파일, 여러 구성을 합치는 것을 말하므로 번들러란 합치게 해주는 것을 말합니다.</li>\n<li>모듈화된 파일들을 하나로 묶어 관리해야하므로 번들러의 역할이 중요해졌습니다.</li>\n<li>모듈간의 의존성을 파악하여 하나의 파일로 만들어줍니다.</li>\n<li>npm run build 후에 하나의 자바스크립트 파일로 나온 결과물이 바로 번들된 결과입니다.</li>\n<li>ex) webpack, RequireJS, Rollup, Parcel 등</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/167857980-661007b2-14d2-48a1-bcdb-39a45cd21781.png\" alt=\"bundler\"></p>\n<ul>\n<li>왼쪽에 서로 종속관계인 파일들을 → 웹팩을 통해 → 하나로 깔끔하게 모아줍니다.</li>\n</ul>\n<blockquote>\n<p><a href=\"https://webpack.js.org/\">https://webpack.js.org/</a></p>\n</blockquote>\n<br/>\n<h3 id=\"번들러bundler가-필요한-이유\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EB%93%A4%EB%9F%ACbundler%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"번들러bundler가 필요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번들러(bundler)가 필요한 이유</h3>\n<p>하나의 페이지에 필요한 자바스크립트 파일들이 여러개 있다면 무슨 문제가 있을까요?</p>\n<ol>\n<li>\n<p>파일 하나하나 HTTP 통신을 통해 서버에 요청이 있고! js 파일이 올 때까지 기다리기 때문에 화면 로딩시간이 오래 걸립니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/167858000-82fb1c69-f186-4ca3-8d0b-b446315103e4.png\" alt=\"why-bundler\"></p>\n<p>→ 이렇게 one by one으로 파일을 요청하고 응답받기 때문에 파일 개수가 많아질 수록 요청이 많아진다. <br/>\n즉, 유지보수 좋게 한다고 다 모듈화 시키면 렌더링 퍼포먼스가 안 좋아지기 때문에, 개발은 파일별로 하되 실제 브라우저에서는 하나의 파일만 있는 것이 좋다. 그래서 웹팩이 이러한 역활을 하는 bundler로서 주로 우리는 CRA를 통해 사용해 왔다.</p>\n</li>\n<li>\n<p>여러 파일로 나눴는데 서로 종속관계라면?</p>\n<p>이 경우에 여러 개로 쪼갠 파일의 로드 순서가 중요하다. 왜냐하면, 아래와 같이 mypage.js와 main.js 파일이 있는데 mypage.js에서 getUser 함수를 호출하기 때문에 main.js 파일은 무조건 mypage.js 보다 먼저 로드 되어야 한다. 웹팩이 이러한 모듈의 종속(dependecy) 관계를 파악하고 알아서! 잘 하나의 파일로 만들어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// mypage.js</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// main.js</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- script 순서가 중요해! --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mypage.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n</li>\n<li>\n<p>웹팩은 js 파일 뿐만 아니라, img, css, mp4 등 다양한 리소스를 모두 모듈로 관리하여 서로의 의존성을 관리합니다.</p>\n</li>\n<li>\n<p>이외에도 개발 단계에서 사용하는 dev server, 필요할 때 import하는 dynamic import, 모듈을 하나의 파일로 만들지 않고 의존성을 따져 나눠서 빌드하는 code spliting 등을 지원합니다.</p>\n</li>\n</ol>\n<ul>\n<li>전체적으로 이런 느낌 !!\n<img src=\"https://user-images.githubusercontent.com/67889389/167857997-3ccf298f-8799-4bdc-b38f-34f9d935953f.jpeg\" alt=\"bundler2\"></li>\n</ul>\n<h2 id=\"babel\" style=\"position:relative;\"><a href=\"#babel\" aria-label=\"babel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel</h2>\n<p>webpack과 babel이 서로 특별한 관계가 있는 것은 아니지만 webpack을 설정할 때 주로 babel을 추가한다.</p>\n<p>간단히 말하면, Babel은 JavaScript 컴파일러입니다.</p>\n<blockquote>\n<p>compiler(컴파일러) 란?\n사람이 읽기 편한 프로그래밍 언어에서 컴퓨터가 읽기 편한 코드로 바꿔주는 것\n대표적 compile 언어 : c, c++, java</p>\n</blockquote>\n<br/>\n<h3 id=\"babel이-필요한-이유\" style=\"position:relative;\"><a href=\"#babel%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"babel이 필요한 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel이 필요한 이유?</h3>\n<ul>\n<li>JavaScript는 컴파일 언어가 아닌지만, Babel은 방금 나온 신상 자바스크립트 버전을 어느 브라우저에나 사용할 수 있도록 ES5 버전으로 변환해줍니다. 즉, 브라우저는 아직 새로운 자바스크립트 버전을 맞이할 준비가 안 됐는데, 개발자는 새로운 버전으로 효율적인 문법을 미리 쓰면 좋으니까 이런 Babel이 나온 것입니다.</li>\n<li>자바스크립트에서 자바스크립트로 변환하는 것이지만, 높은 버전에서 낮은 버전으로 바꿔줍니다. 하지만, c, c++, java에만 사용하는 컴파일이라는 단어에 익숙한 사람은 컴파일러 대신 “트랜스파일러”라고 하는 사람도 있습니다.</li>\n<li>create react app으로 react 개발을 할 때 아직 브라우저가 받아드리지 못하는 각종 최신 메서드 들을 사용하는 경우가 많습니다. create react app에서는 이미 Babel 설정이 되어있기 때문에 우리는 버전을 고려하지 않고 마음대로 개발할 수 있다.\\</li>\n</ul>\n<br/>\n<h3 id=\"babel과-관련된-필수-module\" style=\"position:relative;\"><a href=\"#babel%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%ED%95%84%EC%88%98-module\" aria-label=\"babel과 관련된 필수 module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Babel과 관련된 필수 module</h3>\n<ul>\n<li>babel-loader: 바벨과 웹펙이 어떻게 동작하는지</li>\n<li>@babel/core: babel로 컴파일해서 결과물 파일이 나오도록 babel관련한 핵심 모듈</li>\n<li>@babel/preset-env: ES2015?6?7 등 어떤 버전을 쓸지에 관한 모듈</li>\n<li>@babel/preset-react: jsx 를 js로!</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9B%B9%ED%8C%A9\">웹팩</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%A8%EB%93%88%ED%8C%A8%ED%84%B4%EA%B3%BC-%ED%95%84%EC%9A%94%EC%84%B1\">모듈패턴과 필요성</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%A8%EB%93%88module\">모듈(module)</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AA%A8%EB%93%88-%EA%B5%AC%ED%98%84\">모듈 구현</a></p>\n<ul>\n<li><a href=\"#%EC%98%9B%EB%82%A0-%EB%B0%A9%EC%8B%9D\">옛날 방식</a></li>\n<li><a href=\"#%EB%AA%A8%EB%93%88-%EA%B8%B0%EB%8A%A5-%ED%91%9C%EC%A4%80%ED%99%94-%EC%9A%94%EC%A6%98-%EB%B0%A9%EC%8B%9D\">모듈 기능 표준화 (요즘 방식)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B2%88%EB%93%A4%EB%9F%ACbundler\">번들러(bundler)</a></p>\n<ul>\n<li><a href=\"#%EB%B2%88%EB%93%A4%EB%9F%ACbundler%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\">번들러(bundler)가 필요한 이유</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#babel\">Babel</a></p>\n<ul>\n<li><a href=\"#babel%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\">Babel이 필요한 이유?</a></li>\n<li><a href=\"#babel%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%ED%95%84%EC%88%98-module\">Babel과 관련된 필수 module</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"May 11, 2022","title":"Webpack","categories":"web","author":"developjik","emoji":"⌨"},"fields":{"slug":"/web-webpack/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/developjik","comments":{"utterances":{"repo":"developjik/developjik.github.io"}}}}},"pageContext":{"slug":"/web-spa,csr,ssr/","nextSlug":"/web-search-seo/","prevSlug":"/web-webpack/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}