{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/design-mvc-pattern/",
    "result": {"data":{"cur":{"id":"bf21d330-31c0-5b84-af4f-fba785e39e02","html":"<h2 id=\"mvc-pattern\" style=\"position:relative;\"><a href=\"#mvc-pattern\" aria-label=\"mvc pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC Pattern</h2>\n<ul>\n<li>관심사의 분리(SoC, separation of concern)에서부터 나온 패턴</li>\n</ul>\n<blockquote>\n<p>관심사 분리로 <strong>코드의 단순화</strong> 및 <strong>유지보수</strong>의 <strong>더 높은 수준의 자유</strong>가 생긴다. 관심사가 잘 분리될 때 독립적인 개발과 업그레이드 외에도 모듈 재사용을 위한 더 높은 자유가 있다. 모듈이 인터페이스 뒤에서 이러한 관심사의 세세한 부분을 숨기기 때문에 자유도가 높아짐으로써 다른 부분의 세세한 사항을 모르더라도, 또 해당 부분들에 상응하는 변경을 취하지 않더라도 하나의 관심사의 코드 부분을 개선 및 수정할 수 있다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/162455366-127eca25-f071-4bcb-9943-ce6152eae3f4.png\" alt=\"MVC\"></p>\n<br/>\n<h3 id=\"model\" style=\"position:relative;\"><a href=\"#model\" aria-label=\"model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Model</h3>\n<ul>\n<li>데이터. json 또는 데이터 모델 정의.</li>\n<li>일반적으로 데이터를 처리하는 로직과 함께!</li>\n</ul>\n<br/>\n<h3 id=\"view\" style=\"position:relative;\"><a href=\"#view\" aria-label=\"view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View</h3>\n<ul>\n<li>화면, html, 레이아웃 이라고 생각하면 된다.</li>\n</ul>\n<br/>\n<h3 id=\"controller\" style=\"position:relative;\"><a href=\"#controller\" aria-label=\"controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller</h3>\n<ul>\n<li>이벤트 핸들러와 이벤트를 처리하는 로직이 있는 곳.</li>\n<li>데이터랑 뷰 이어주는 역할.</li>\n<li>요청이(이벤트 발생) 오면 모델에 적절한 로직을 실행하도록 한다.</li>\n</ul>\n<br/>\n<h3 id=\"대표적인-mvc-pattern-framework\" style=\"position:relative;\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-mvc-pattern-framework\" aria-label=\"대표적인 mvc pattern framework permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대표적인 MVC Pattern FrameWork</h3>\n<ul>\n<li>ruby on rails, laravel, angular, backbonejs, django..</li>\n</ul>\n<br/>\n<h3 id=\"mvc의-단점복잡성\" style=\"position:relative;\"><a href=\"#mvc%EC%9D%98-%EB%8B%A8%EC%A0%90%EB%B3%B5%EC%9E%A1%EC%84%B1\" aria-label=\"mvc의 단점복잡성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC의 단점(복잡성)</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/162455375-6dbb03e2-b43c-4991-961f-fdd59f2d7d20.png\" alt=\"MVC-complex\"></p>\n<br/>\n<h3 id=\"react\" style=\"position:relative;\"><a href=\"#react\" aria-label=\"react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React?</h3>\n<ul>\n<li>React.js는 mvc pattern을 포함(이용)하고 있는 FrameWork가 아니다.</li>\n<li>React.js는 레고처럼 조합해서 사용할 수 있는 UI 라이브러리이다.</li>\n<li>데이터 관리(감지)가 쉬운 재사용 가능한 UI 컴포넌트를 위해 만들어졌다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#mvc-pattern\">MVC Pattern</a></p>\n<ul>\n<li><a href=\"#model\">Model</a></li>\n<li><a href=\"#view\">View</a></li>\n<li><a href=\"#controller\">Controller</a></li>\n<li><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-mvc-pattern-framework\">대표적인 MVC Pattern FrameWork</a></li>\n<li><a href=\"#mvc%EC%9D%98-%EB%8B%A8%EC%A0%90%EB%B3%B5%EC%9E%A1%EC%84%B1\">MVC의 단점(복잡성)</a></li>\n<li><a href=\"#react\">React?</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"MVC Pattern 관심사의 분리(SoC, separation of concern)에서부터 나온 패턴 관심사 분리로 코드의 단순화 및 유지보수의 더 높은 수준의 자유가 생긴다. 관심사가 잘 분리될 때 독립적인 개발과 업그레이드 외에도 모듈 재사용을 위한 더 높은 자유가 있다. 모듈이 인터페이스 뒤에서 이러한 관심사의 세세한 부분을 숨기기 때문에 자유도가 높아짐으로써 다른 부분의 세세한 사항을 모르더라도, 또 해당 부분들에 상응하는 변경을 취하지 않더라도 하나의 관심사의 코드 부분을 개선 및 수정할 수 있다. MVC Model 데이터. json 또는 데이터 모델 정의. 일반적으로 데이터를 처리하는 로직과 함께! View 화면, html, 레이아웃 이라고 생각하면 된다. Controller 이벤트 핸들러와 이벤트를 처리하는 로직이 있는 곳. 데이터랑 뷰 이어주는 역할. 요청이(이벤트 발생) 오면 모델에 적절한 로직을 실행하도록 한다. 대표적인 MVC Pattern FrameWork …","frontmatter":{"date":"April 09, 2022","title":"MVC 패턴","categories":"design","author":"developjik","emoji":"🏳️‍🌈"},"fields":{"slug":"/design-mvc-pattern/"}},"next":{"id":"d0744b4a-ec3d-5a43-b047-57a0c8b0bacf","html":"<h2 id=\"web-system-development-history\" style=\"position:relative;\"><a href=\"#web-system-development-history\" aria-label=\"web system development history permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web System Development History</h2>\n<h3 id=\"1세대-웹-서비스---전통적인-web-system-architecture-정적-웹\" style=\"position:relative;\"><a href=\"#1%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---%EC%A0%84%ED%86%B5%EC%A0%81%EC%9D%B8-web-system-architecture-%EC%A0%95%EC%A0%81-%EC%9B%B9\" aria-label=\"1세대 웹 서비스   전통적인 web system architecture 정적 웹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1세대 웹 서비스 - 전통적인 Web System Architecture. 정적 웹.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161797770-76df6f7c-a5e0-4048-b66d-94ecf705d93b.png\" alt=\"traditional_web_architecture\"></p>\n<ul>\n<li>웹 서버가 모든 내용이 담긴 HTML 페이지를 클라이언트(ex. Web browser)에게 전송\n<ul>\n<li>초창기 웹사이트/서비스에 적합했던 시스템</li>\n<li>초창기 웹사이트는 단순한 정보 제공 위주</li>\n<li>특별히 기능이 X, User Interaction 이 많이 요구되지 X</li>\n</ul>\n</li>\n<li>1세대 웹이 정적인 이유? HTML, CSS 자체가 정적\n<ul>\n<li><code class=\"language-text\">Hyper Text</code> : 링크로 연결된 문서</li>\n<li><code class=\"language-text\">Markup Language</code> : “이렇게 보여줘라” 에 대한 지시</li>\n<li><code class=\"language-text\">HTML</code> : 웹페이지의 내용을 브라우저에게 어떻게 렌더링(rendering) 해주라고 마크업 해주는 것</li>\n</ul>\n</li>\n<li>어떻게 보여지는가에 대한 것이기 때문에 로직(동적)이 없다. 정적</li>\n</ul>\n<br/>\n<h3 id=\"2세대-웹-서비스---user-interaction-증가-동적-웹-javascript\" style=\"position:relative;\"><a href=\"#2%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---user-interaction-%EC%A6%9D%EA%B0%80-%EB%8F%99%EC%A0%81-%EC%9B%B9-javascript\" aria-label=\"2세대 웹 서비스   user interaction 증가 동적 웹 javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2세대 웹 서비스 - User Interaction 증가. 동적 웹 (JavaScript).</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161797756-2701467a-076a-4d86-8198-c931f491895d.png\" alt=\"first_version_of_spa_ajax\"></p>\n<ul>\n<li>웹서비스들이 점점 발전함에 따라 다이나믹한 interaction이 요구되어 웹 기반의 언어인 자바스크립트가 출현</li>\n<li>JavaScript 는 일부분에서만 사용되었고, 또한 현재 통용되는 API 의 개념이 아직은 널리 사용 되지 않음 <br/> → 동일한 서버에서 HTML, Javascript(프론트 영역) 데이터(백엔드 영역) 모두 전송 <br/> ex) Python Django, PHP Laravel</li>\n</ul>\n<br/>\n<h3 id=\"3세대-웹-서비스---spa-구별되기-시작하는-frontend--backend\" style=\"position:relative;\"><a href=\"#3%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---spa-%EA%B5%AC%EB%B3%84%EB%90%98%EA%B8%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-frontend--backend\" aria-label=\"3세대 웹 서비스   spa 구별되기 시작하는 frontend  backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3세대 웹 서비스 - SPA. 구별되기 시작하는 Frontend / Backend.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161797762-264d9948-e70e-40d2-b24c-9eb3a00f4d85.png\" alt=\"spa\"></p>\n<ul>\n<li>동적인 기능이 main</li>\n<li>즉 HTML/JavaScript 부분과 데이터 부분이 구조적으로 분리 되기 시작 <br/>⇒ Frontend 개발과 Backend 개발이 독립적으로 분리 (프론트 - UI UX / 백엔드 - Data)</li>\n<li>기존의 방식대로 서버가 페이지 구성에 필요한 모든 요소(HTML, JavaScript, Data)를 매번 전송하는 것이 아니라, 파일은 처음 한 번만 송수신. 그 뒤로는 실시간 데이터만 주고 받음\n<ul>\n<li>AJAX는 js를 사용하여 브라우저가 서버에게 비동기 방식으로 데이터를 요청하고, 응답한 데이터를 수신하여 웹페이지를 일부 동적으로 갱신</li>\n<li>제일 처음 전송된 단일 HTML 페이지에 포함되어 있는 JavaScript 에서 필요한 데이터를 API 서버로부터 호출하여 필요한 화면을 dynamic 하게 새롭게 구성해주는 방식</li>\n</ul>\n</li>\n<li>기술 스택도 각자에 맞는 스택을 시용하기 시작함. (ex. <code class=\"language-text\">React</code>)</li>\n<li>프론트엔드가 개발의 혁신이 빠른 이유도 이 분야 자체의 역사가 짧기 때문</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#web-system-development-history\">Web System Development History</a></p>\n<ul>\n<li><a href=\"#1%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---%EC%A0%84%ED%86%B5%EC%A0%81%EC%9D%B8-web-system-architecture-%EC%A0%95%EC%A0%81-%EC%9B%B9\">1세대 웹 서비스 - 전통적인 Web System Architecture. 정적 웹.</a></li>\n<li><a href=\"#2%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---user-interaction-%EC%A6%9D%EA%B0%80-%EB%8F%99%EC%A0%81-%EC%9B%B9-javascript\">2세대 웹 서비스 - User Interaction 증가. 동적 웹 (JavaScript).</a></li>\n<li><a href=\"#3%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---spa-%EA%B5%AC%EB%B3%84%EB%90%98%EA%B8%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-frontend--backend\">3세대 웹 서비스 - SPA. 구별되기 시작하는 Frontend / Backend.</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 06, 2022","title":"Web 발전","categories":"web","author":"developjik","emoji":"⌨"},"fields":{"slug":"/web-web-development/"}},"prev":{"id":"e1382c9d-f959-5a8a-81f5-8692e16acbc0","html":"<h2 id=\"왜-redux를-쓸까\" style=\"position:relative;\"><a href=\"#%EC%99%9C-redux%EB%A5%BC-%EC%93%B8%EA%B9%8C\" aria-label=\"왜 redux를 쓸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜 Redux를 쓸까?</h2>\n<ul>\n<li>앱에서 전체적으로 사용할 데이터 관리 필요\n<ul>\n<li>React.js 는 단순 UI 라이브러리이기 때문에 데이터 관리를 고려하고 있지 않음</li>\n<li>로컬스토리지에 데이터를 저장하고 불러오는 로직 대신 Redux!</li>\n</ul>\n</li>\n<li>하나의 state(데이터)를 여러 컴포넌트에서 필요한 경우가 있다.</li>\n<li>페이지를 reload 해도 api 호출 없이 유지해야 할 데이터가 있다.</li>\n<li>페이지의 레이아웃에 영향 받지 않는 modal, toast, alert 같은 전역 UI 컴포넌트의 상태 관리도 필요하다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/162458881-41a2ed5a-80d2-42f0-a184-45efe6d503b1.png\" alt=\"Why_Redux\"></p>\n<blockquote>\n<p>멀리 떨어진 컴포넌트끼리 상태값을 교환할 때 복잡해지는 데이터 흐름이 전역 스토어를 통해 간결해짐</p>\n</blockquote>\n<br/>\n<h2 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux?</h2>\n<ul>\n<li>\n<p>Redux는 Flux 패턴을 근본으로한 데이터 관리 라이브러리이다.</p>\n</li>\n<li>\n<p>React 뿐 아니라 다른 UI 라이브러리에서도 사용할 수 있다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/162458897-1883eed4-c28f-460f-bf2b-e6830b715feb.png\" alt=\"Redux\"></p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">Store</code></strong>: Application의 전체 state는 store라고 불리는 곳에서 관리된다.</p>\n<ul>\n<li>store는 redux의 상태값(state)를 갖는 객체이다.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">Action</code></strong>: action은 state 변화를 일으킬 수 있는 행동정보, 현상등이라고 생각하면 된다.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">Dispatcher</code></strong>: action이 일어나면 Dispatcher를 통해서 store의 state가 업뎃된다.</p>\n</li>\n<li>\n<p><strong><code class=\"language-text\">View</code></strong>: state가 변경되면 view에서 감지하고, 화면에 반영(rerender) 된다.</p>\n</li>\n<li>\n<p>만약, view에서 action 발생 -> dispatcher에 의해 store에 저장 -> state가 변경되면 -> 필요한 view에서 감지후 변경.</p>\n</li>\n</ul>\n<br/>\n<h3 id=\"redux의-세-가지-원칙\" style=\"position:relative;\"><a href=\"#redux%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99\" aria-label=\"redux의 세 가지 원칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux의 세 가지 원칙</h3>\n<h4 id=\"-전체-상태값이-하나의-객체로-표현됨\" style=\"position:relative;\"><a href=\"#-%EC%A0%84%EC%B2%B4-%EC%83%81%ED%83%9C%EA%B0%92%EC%9D%B4-%ED%95%98%EB%82%98%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%ED%91%9C%ED%98%84%EB%90%A8\" aria-label=\" 전체 상태값이 하나의 객체로 표현됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:: 전체 상태값이 하나의 객체로 표현됨</h4>\n<ul>\n<li>간단히 말하면 하나의 React앱에 store가 하나라는 뜻임</li>\n</ul>\n<h4 id=\"-상태값state는-읽기-전용이다\" style=\"position:relative;\"><a href=\"#-%EC%83%81%ED%83%9C%EA%B0%92state%EB%8A%94-%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9%EC%9D%B4%EB%8B%A4\" aria-label=\" 상태값state는 읽기 전용이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:: 상태값(state)는 읽기 전용이다.</h4>\n<ul>\n<li>원래 컴포넌트에서의 state 관리 생각하시면 됩니다.</li>\n<li>(state 값 직접 바꾸지 않고, setState 함수 사용해서 변경 했잖아요~)</li>\n</ul>\n<h4 id=\"-상태값state은-순수-함수에-의해서만-변경되어야-한다\" style=\"position:relative;\"><a href=\"#-%EC%83%81%ED%83%9C%EA%B0%92state%EC%9D%80-%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%97%90-%EC%9D%98%ED%95%B4%EC%84%9C%EB%A7%8C-%EB%B3%80%EA%B2%BD%EB%90%98%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\" 상태값state은 순수 함수에 의해서만 변경되어야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>:: 상태값(state)은 순수 함수에 의해서만 변경되어야 한다.</h4>\n<ul>\n<li>상태값(state)을 변경시키려면, 상태값을 변경하는 함수가 필요합니다.</li>\n<li>이 함수를 reducer라고 하고, 이 함수가 순수함수(pure function) 이어야 한다는 말.</li>\n</ul>\n<blockquote>\n<p>순수함수(Pure function)란?<br/> > <strong>항상 같은 input은 항상 같은 output을 반환하는 함수.</strong></p>\n</blockquote>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%99%9C-redux%EB%A5%BC-%EC%93%B8%EA%B9%8C\">왜 Redux를 쓸까?</a></p>\n</li>\n<li>\n<p><a href=\"#redux\">Redux?</a></p>\n<ul>\n<li>\n<p><a href=\"#redux%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%EC%9B%90%EC%B9%99\">Redux의 세 가지 원칙</a></p>\n<ul>\n<li><a href=\"#-%EC%A0%84%EC%B2%B4-%EC%83%81%ED%83%9C%EA%B0%92%EC%9D%B4-%ED%95%98%EB%82%98%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%ED%91%9C%ED%98%84%EB%90%A8\">:: 전체 상태값이 하나의 객체로 표현됨</a></li>\n<li><a href=\"#-%EC%83%81%ED%83%9C%EA%B0%92state%EB%8A%94-%EC%9D%BD%EA%B8%B0-%EC%A0%84%EC%9A%A9%EC%9D%B4%EB%8B%A4\">:: 상태값(state)는 읽기 전용이다.</a></li>\n<li><a href=\"#-%EC%83%81%ED%83%9C%EA%B0%92state%EC%9D%80-%EC%88%9C%EC%88%98-%ED%95%A8%EC%88%98%EC%97%90-%EC%9D%98%ED%95%B4%EC%84%9C%EB%A7%8C-%EB%B3%80%EA%B2%BD%EB%90%98%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\">:: 상태값(state)은 순수 함수에 의해서만 변경되어야 한다.</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 13, 2022","title":"Redux란?","categories":"javascript","author":"developjik","emoji":"⌨"},"fields":{"slug":"/js-redux/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/developjik","comments":{"utterances":{"repo":"developjik/developjik.github.io"}}}}},"pageContext":{"slug":"/design-mvc-pattern/","nextSlug":"/web-web-development/","prevSlug":"/js-redux/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}