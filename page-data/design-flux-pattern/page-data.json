{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/design-flux-pattern/",
    "result": {"data":{"cur":{"id":"4402668f-189c-5274-82f1-88d33245ace7","html":"<h2 id=\"기존-mvc의-문제점\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-mvc%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"기존 mvc의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 MVC의 문제점</h2>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161048298-7446dcb2-3522-4365-b753-b1b5ed8bc766.png\" alt=\"mvc\"></p>\n<ul>\n<li>프로젝트 규모가 커질수록 빠르게 복잡해진다.</li>\n<li>feature 추가될 때마다 모델과 뷰를 연결하는 복잡성이 증가한다.</li>\n<li>데이터 간의 의존성과 연쇄적인 갱신은 뒤얽힌 데이터 흐름을 만들고 예측할 수 없는 결과로 이끌게 된다.</li>\n<li>새로온 개발자가 합류하면, 너무 복잡해서 코드만 보고 해석이 힘들다. (유지비용 증가)</li>\n<li>복잡성이 증가할 수록 예측 불가능해지고 안정성이 떨어진다. (어디서 버그가 터져나올지 테스트도 어렵다.)</li>\n</ul>\n<blockquote>\n<p>이 프로젝트는 파생되는 데이터를 올바르게 다루기 위해 시작되었다. 예를 들면 현재 뷰에서 <strong>읽지 않은 메시지가 강조</strong>되어 있으면서도 <strong>읽지 않은 메시지 수를 상단 바에 표시</strong>하고 싶었다. 이런 부분은 MVC에서 다루기 어려운데 <strong>메시지를 읽기 위한 단일 스레드에서 메시지 스레드 모델을 갱신</strong>해야하고 동시에 <strong>읽지 않은 메시지 수 모델을 갱신</strong> 해야하기 때문이다.</p>\n</blockquote>\n<br/>\n<h2 id=\"flux\" style=\"position:relative;\"><a href=\"#flux\" aria-label=\"flux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flux</h2>\n<p>Flux는 Facebook에서 소개한 아키텍쳐입니다. 전통적인 MVC 패턴을 버리고, 개발이 오래되고 커져도 유지보수가 쉽고 reliable하고 high performance를 유지하는 새로운 패턴을 제시했습니다.</p>\n<p>Redux는 Flux 패턴에 기반 라이브러리이므로 Flux 패턴을 이해하고 넘어갈 필요가 있습니다!</p>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161048291-44f83bfd-2964-4c88-a125-1063c3946213.png\" alt=\"flux\"></p>\n<ul>\n<li><strong>단방향 데이터 흐름</strong>(unidirectional data flow)이 핵심.</li>\n<li>사용자에 의해 Action이 발행되면, 해당 Action에 영향이 있는 모든 View가 갱신(rerender)된다. 어디에서 어떤 일이 일어날지 알 수 있다(=예상가능하다. 복잡하지 않다).</li>\n<li>Flux는 세 가지 부분으로 구성 되어 있다.\n<ol>\n<li>Dispatcher</li>\n<li>Stores</li>\n<li>Views(리액트 컴포넌트)</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"dispatcher\" style=\"position:relative;\"><a href=\"#dispatcher\" aria-label=\"dispatcher permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dispatcher</h3>\n<ul>\n<li>dispatcher를 통해 action을 발행한다.</li>\n<li>모든 데이터는 중앙 허브인 dispatcher를 통해 흐른다.</li>\n</ul>\n<h3 id=\"store\" style=\"position:relative;\"><a href=\"#store\" aria-label=\"store permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Store</h3>\n<ul>\n<li>어플리케이션의 데이터와 비지니스 로직을 가지고 있는 store</li>\n</ul>\n<h3 id=\"views\" style=\"position:relative;\"><a href=\"#views\" aria-label=\"views permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Views</h3>\n<ul>\n<li>action이 발행되면 이 action에 영향이 있는 모든 view가 갱신됨</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B8%B0%EC%A1%B4-mvc%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">기존 MVC의 문제점</a></p>\n</li>\n<li>\n<p><a href=\"#flux\">Flux</a></p>\n<ul>\n<li><a href=\"#dispatcher\">Dispatcher</a></li>\n<li><a href=\"#store\">Store</a></li>\n<li><a href=\"#views\">Views</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"기존 MVC의 문제점 mvc 프로젝트 규모가 커질수록 빠르게 복잡해진다. feature 추가될 때마다 모델과 뷰를 연결하는 복잡성이 증가한다. 데이터 간의 의존성과 연쇄적인 갱신은 뒤얽힌 데이터 흐름을 만들고 예측할 수 없는 결과로 이끌게 된다. 새로온 개발자가 합류하면, 너무 복잡해서 코드만 보고 해석이 힘들다. (유지비용 증가) 복잡성이 증가할 수록 예측 불가능해지고 안정성이 떨어진다. (어디서 버그가 터져나올지 테스트도 어렵다.) 이 프로젝트는 파생되는 데이터를 올바르게 다루기 위해 시작되었다. 예를 들면 현재 뷰에서 읽지 않은 메시지가 강조되어 있으면서도 읽지 않은 메시지 수를 상단 바에 표시하고 싶었다. 이런 부분은 MVC에서 다루기 어려운데 메시지를 읽기 위한 단일 스레드에서 메시지 스레드 모델을 갱신해야하고 동시에 읽지 않은 메시지 수 모델을 갱신 해야하기 때문이다. Flux Flux는 Facebook에서 소개한 아키텍쳐입니다. 전통적인 MVC 패턴을 버리고, 개발이 …","frontmatter":{"date":"April 02, 2022","title":"Flux 패턴","categories":"design","author":"developjik","emoji":"🏳️‍🌈"},"fields":{"slug":"/design-flux-pattern/"}},"next":{"id":"a30f0651-2dd8-5eb4-8a80-6714b2809564","html":"<blockquote>\n<p>반응형 웹이란, 하나의 웹사이트에서 PC, 스마트폰, 태블릿 PC 등 접속하는 디스플레이의 종류에 따라 화면의 크기가 자동으로 변하는 웹 페이지를 의미합니다. 오늘날에는 IT 기기의 종류가 더욱 다양해짐에 따라 디스플레이의 크기에 맞게 유동적으로 반응하는 반응형 웹을 구현하는 것이 더욱 중요하다.</p>\n</blockquote>\n<br/>\n<h2 id=\"일반적인-breakpoint\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-breakpoint\" aria-label=\"일반적인 breakpoint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적인 Breakpoint</h2>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/160392557-bdaff57c-6d16-4a92-ad4d-2c19c55c4c69.png\" alt=\"responsive\"></p>\n<ul>\n<li>desktop 스타일링: 1920 ~ 1024px</li>\n<li>ipad 스타일링: 1024 ~ 768px</li>\n<li>phone 스타일링: 768 ~ 0px</li>\n<li>보통 2개(1024 / 768)를 이용한다</li>\n<li>관리를 편하게 하려면 1개(768)를 이용한다</li>\n</ul>\n<br/>\n<h2 id=\"css-반응형-media-query\" style=\"position:relative;\"><a href=\"#css-%EB%B0%98%EC%9D%91%ED%98%95-media-query\" aria-label=\"css 반응형 media query permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 반응형 Media Query</h2>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> only screen <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 480px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">body </span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">@media</code> : media 쿼리를 시작</li>\n<li><code class=\"language-text\">only screen</code> : 어떤 디바이스에서 적용하는지 알려줍니다. 예를 들면 프린트를 하고싶을 때 적용하려면 only print라고 작성하면 됩니다. screen이라고 할 경우 어떤 디바이스에 상관없이, 화면에 보이는 스크린이기만 하면 전부 적용됩니다.</li>\n<li><code class=\"language-text\">and (max-width : 480px)</code> : 이건 media feature라고 불리는 부분입니다. 어느 조건에 아래의 css를 적용할지 작성해줘야 합니다.</li>\n</ul>\n<br/>\n<h2 id=\"scss-반응형\" style=\"position:relative;\"><a href=\"#scss-%EB%B0%98%EC%9D%91%ED%98%95\" aria-label=\"scss 반응형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SCSS 반응형</h2>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/* mediaQuery.scss */</span>\n\n<span class=\"token property\"><span class=\"token variable\">$phone</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">'only screen and (max-width: 768px)'</span><span class=\"token punctuation\">;</span>\n<span class=\"token property\"><span class=\"token variable\">$desktop</span></span><span class=\"token punctuation\">:</span> <span class=\"token string\">'screen and (min-width: 769px)'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"scss\"><pre class=\"language-scss\"><code class=\"language-scss\"><span class=\"token comment\">/* box.scss */</span>\n<span class=\"token keyword\">@import</span> <span class=\"token string\">'./mediaQuery.scss'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token selector\">.big-box </span><span class=\"token punctuation\">{</span>\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token variable\">#{$phone}</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token variable\">#{$desktop}</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9D%B8-breakpoint\">일반적인 Breakpoint</a></li>\n<li><a href=\"#css-%EB%B0%98%EC%9D%91%ED%98%95-media-query\">CSS 반응형 Media Query</a></li>\n<li><a href=\"#scss-%EB%B0%98%EC%9D%91%ED%98%95\">SCSS 반응형</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 30, 2022","title":"Responsive Web","categories":"css","author":"developjik","emoji":"🎨"},"fields":{"slug":"/css-responsive-web/"}},"prev":{"id":"d0744b4a-ec3d-5a43-b047-57a0c8b0bacf","html":"<h2 id=\"web-system-development-history\" style=\"position:relative;\"><a href=\"#web-system-development-history\" aria-label=\"web system development history permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Web System Development History</h2>\n<h3 id=\"1세대-웹-서비스---전통적인-web-system-architecture-정적-웹\" style=\"position:relative;\"><a href=\"#1%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---%EC%A0%84%ED%86%B5%EC%A0%81%EC%9D%B8-web-system-architecture-%EC%A0%95%EC%A0%81-%EC%9B%B9\" aria-label=\"1세대 웹 서비스   전통적인 web system architecture 정적 웹 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1세대 웹 서비스 - 전통적인 Web System Architecture. 정적 웹.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161797770-76df6f7c-a5e0-4048-b66d-94ecf705d93b.png\" alt=\"traditional_web_architecture\"></p>\n<ul>\n<li>웹 서버가 모든 내용이 담긴 HTML 페이지를 클라이언트(ex. Web browser)에게 전송\n<ul>\n<li>초창기 웹사이트/서비스에 적합했던 시스템</li>\n<li>초창기 웹사이트는 단순한 정보 제공 위주</li>\n<li>특별히 기능이 X, User Interaction 이 많이 요구되지 X</li>\n</ul>\n</li>\n<li>1세대 웹이 정적인 이유? HTML, CSS 자체가 정적\n<ul>\n<li><code class=\"language-text\">Hyper Text</code> : 링크로 연결된 문서</li>\n<li><code class=\"language-text\">Markup Language</code> : “이렇게 보여줘라” 에 대한 지시</li>\n<li><code class=\"language-text\">HTML</code> : 웹페이지의 내용을 브라우저에게 어떻게 렌더링(rendering) 해주라고 마크업 해주는 것</li>\n</ul>\n</li>\n<li>어떻게 보여지는가에 대한 것이기 때문에 로직(동적)이 없다. 정적</li>\n</ul>\n<br/>\n<h3 id=\"2세대-웹-서비스---user-interaction-증가-동적-웹-javascript\" style=\"position:relative;\"><a href=\"#2%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---user-interaction-%EC%A6%9D%EA%B0%80-%EB%8F%99%EC%A0%81-%EC%9B%B9-javascript\" aria-label=\"2세대 웹 서비스   user interaction 증가 동적 웹 javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2세대 웹 서비스 - User Interaction 증가. 동적 웹 (JavaScript).</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161797756-2701467a-076a-4d86-8198-c931f491895d.png\" alt=\"first_version_of_spa_ajax\"></p>\n<ul>\n<li>웹서비스들이 점점 발전함에 따라 다이나믹한 interaction이 요구되어 웹 기반의 언어인 자바스크립트가 출현</li>\n<li>JavaScript 는 일부분에서만 사용되었고, 또한 현재 통용되는 API 의 개념이 아직은 널리 사용 되지 않음 <br/> → 동일한 서버에서 HTML, Javascript(프론트 영역) 데이터(백엔드 영역) 모두 전송 <br/> ex) Python Django, PHP Laravel</li>\n</ul>\n<br/>\n<h3 id=\"3세대-웹-서비스---spa-구별되기-시작하는-frontend--backend\" style=\"position:relative;\"><a href=\"#3%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---spa-%EA%B5%AC%EB%B3%84%EB%90%98%EA%B8%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-frontend--backend\" aria-label=\"3세대 웹 서비스   spa 구별되기 시작하는 frontend  backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3세대 웹 서비스 - SPA. 구별되기 시작하는 Frontend / Backend.</h3>\n<p><img src=\"https://user-images.githubusercontent.com/67889389/161797762-264d9948-e70e-40d2-b24c-9eb3a00f4d85.png\" alt=\"spa\"></p>\n<ul>\n<li>동적인 기능이 main</li>\n<li>즉 HTML/JavaScript 부분과 데이터 부분이 구조적으로 분리 되기 시작 <br/>⇒ Frontend 개발과 Backend 개발이 독립적으로 분리 (프론트 - UI UX / 백엔드 - Data)</li>\n<li>기존의 방식대로 서버가 페이지 구성에 필요한 모든 요소(HTML, JavaScript, Data)를 매번 전송하는 것이 아니라, 파일은 처음 한 번만 송수신. 그 뒤로는 실시간 데이터만 주고 받음\n<ul>\n<li>AJAX는 js를 사용하여 브라우저가 서버에게 비동기 방식으로 데이터를 요청하고, 응답한 데이터를 수신하여 웹페이지를 일부 동적으로 갱신</li>\n<li>제일 처음 전송된 단일 HTML 페이지에 포함되어 있는 JavaScript 에서 필요한 데이터를 API 서버로부터 호출하여 필요한 화면을 dynamic 하게 새롭게 구성해주는 방식</li>\n</ul>\n</li>\n<li>기술 스택도 각자에 맞는 스택을 시용하기 시작함. (ex. <code class=\"language-text\">React</code>)</li>\n<li>프론트엔드가 개발의 혁신이 빠른 이유도 이 분야 자체의 역사가 짧기 때문</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#web-system-development-history\">Web System Development History</a></p>\n<ul>\n<li><a href=\"#1%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---%EC%A0%84%ED%86%B5%EC%A0%81%EC%9D%B8-web-system-architecture-%EC%A0%95%EC%A0%81-%EC%9B%B9\">1세대 웹 서비스 - 전통적인 Web System Architecture. 정적 웹.</a></li>\n<li><a href=\"#2%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---user-interaction-%EC%A6%9D%EA%B0%80-%EB%8F%99%EC%A0%81-%EC%9B%B9-javascript\">2세대 웹 서비스 - User Interaction 증가. 동적 웹 (JavaScript).</a></li>\n<li><a href=\"#3%EC%84%B8%EB%8C%80-%EC%9B%B9-%EC%84%9C%EB%B9%84%EC%8A%A4---spa-%EA%B5%AC%EB%B3%84%EB%90%98%EA%B8%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-frontend--backend\">3세대 웹 서비스 - SPA. 구별되기 시작하는 Frontend / Backend.</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"April 06, 2022","title":"Web 발전","categories":"web","author":"developjik","emoji":"⌨"},"fields":{"slug":"/web-web-development/"}},"site":{"siteMetadata":{"siteUrl":"https://github.com/developjik","comments":{"utterances":{"repo":"developjik/developjik.github.io"}}}}},"pageContext":{"slug":"/design-flux-pattern/","nextSlug":"/css-responsive-web/","prevSlug":"/web-web-development/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}