{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"ecffa529-f096-5951-990d-4ace75f51e35","excerpt":"콜백 함수란? 함수의 매개변수가 함수일 때, 매개변수로 받은 함수를 콜백함수르고 부른다. 고차 함수(Higher Order Function)란? 매개변수를 함수로 받은 함수. 즉, 외부에서 콜백함수를 전달받은 함수 고차 컴포넌트 (Higher Order Component(HOC))란? 컴포넌트를 매개변수로받아서, 컴포넌트를 반환하는 컴포넌트 일급함수란? 함수를 다른 변수와 동일하게 다루는 언어는 일급 함수를 가졌다고 표현합니다. 예를 들어, 일급 함수를 가진 언어에서는 함수를 다른 함수에 인수로 제공하거나, 함수가 함수를 반환할 수 있으며, 변수에도 할당할 수 있습니다. 일급함수의 특징 함수를 변수에 할당 가능 함수를 또 다른 함수 인자로 전달 가능 함수의 반환값으로 함수 전달 가능 함수형 프로그래밍 특징 중의 하나가 바로 일급함수 입니다. 콜백함수 사용하기 콜백함수라고 해서 꼭 비동기 동작에 쓰이는 것이 아닙니다. 콜백 함수란? 고차 함수(Higher Order Function)…","frontmatter":{"categories":"javascript","title":"콜백 함수","date":"March 12, 2022"},"fields":{"slug":"/call-back-function/"}}},{"node":{"id":"5d713a76-4259-5e29-bd50-bd4928dcce64","excerpt":"동기(Synchronouse) 동기란? 현재 실행 중인 코드가 끝나야 다음 코드를 실행하는 방식 동기의 장/단점 장점: 코드를 순서대로 하나씩 실행하기 때문에, 실행 순서가 보장된다. 단점: 현재 실행중인 task가 종료될 때까지 다음 task가 실행이 안 된다는 문제 (task blocking) 전형적인 동기 task blocking 예제 비동기(Asynchronouse) 비동기란? 현재 실행 중인 코드가 완료되지 않아도, 다음 코드로 넘어감. 즉, 비동기 task(코드)는 실행하라고 브라우저에 맡겨놓고, 다음 task(코드)로 넘어감 비동기의 장/단점 장점: 현재 실행중인 task가 완료되지 않아도, 다음 task를 실행하기 때문에 블로킹이 발생 X 단점: task의 실행 순서가 보장되지 않는다. 비동기 처리가 필요한 이유 자바스크립트 엔진은 한 번에 하나의 task만 실행할 수 있는 Single Thread. Single Thread는처리에 시간이 걸리는 task를 실행하는 …","frontmatter":{"categories":"javascript","title":"동기와 비동기","date":"March 05, 2022"},"fields":{"slug":"/synch-asynch/"}}},{"node":{"id":"c0847a0e-6e23-54d6-97a7-970a3beaa70a","excerpt":"styled-components 설치 styled-components는 각기 다른 컴포넌트들에게 스타일링의 영향을 주지 않기 위해 Local로 동작 styled-components 기본 예제 styled-components props 예제 Circle 컴포넌트에  props 값을 설정해줬으면 해당 값을 배경색으로 설정하고, 그렇지 않으면 검정색. styled-components 상속 styled-components As 속성 만약 Button 컴포넌트의 스타일은 그대로 쓰고싶지만, 태그의 종류를 button이 아닌 a 태그로 바꾸고 싶을땐 ‘as’ 속성을 사용 styled-components Attributes 삽입하기 styled-components css 예제 여러 줄의 CSS 코드를 조건부로 보여주고 싶다면 를 사용한다. 를 불러와서 사용을 해야 그 스타일 내부에서도 다른 를 조회 할 수 있다. styled-components 애니메이션 styled-components The…","frontmatter":{"categories":"css","title":"Styled Components 정리","date":"February 26, 2022"},"fields":{"slug":"/styled-components-summary/"}}},{"node":{"id":"62de7082-5607-5701-9344-731f41173c1e","excerpt":"Sass(Syntactically Awesome Style Sheets)  는  로서, 복잡한 작업을 쉽게 할 수 있게 해주고, 코드의 재 활용성을 높여줄 뿐 만 아니라, 코드의 가독성을 높여주어 유지보수를 쉽게해줍니다.  란?\n 를 확장하는 스크립팅 언어로서, 컴파일러를 통하여 브라우저에서 사용 할 수 있는 일반  문법 형태로 변환됩니다. Sass / Scss React에서 사용법 Comment (주석) 의 주석이 CSS 와 다른점은 ****이 추가되었다는 점 입니다. 은  표기하며,   컴파일 되었을 때 나타나지 않습니다 은  와 동일하며  로 컴파일 되었을 때 나타납니다. Variable (변수)  는 에  개념을 도입한다. 변수가 가능한 형태 : , , , , , ,  변수를 사용 할 때에는  문자를 사용합니다. 변수를 만들어도, 사용하지 않으면 컴파일된  파일에는 아무것도 나타나지 않습니다. Variable Scope 변수를  에서 선언 ⇒  접근가능 Global Vari…","frontmatter":{"categories":"css","title":"Sass/Scss 정리","date":"February 19, 2022"},"fields":{"slug":"/sass-scss-summary/"}}},{"node":{"id":"6aeb5fe5-bc4a-5efc-b154-7e1af02d6cc3","excerpt":"Git 기본 구조 코드는 세 단계에 걸쳐 저장 :  ⇒  ⇒   으로 파일을  상태에 넣는다.  으로  상태에 있는 모든 변경사항을 한다. 여기까지가 에서 작업이다.  ⇒ local repository의 내용을 remote repository로 업로드한다 Git 주요 명령어  저장소 생성  원격 저장소로부터 복제, zip 파일로 받으면 .git 폴더가 없다는 것이 차이점  변경 사항 체크  working directory의 변경된 작업 파일을 staging area로 추가  변경된 모든 파일 스테이징  staging area의 내용을 local repository에 확정  local repository의 내용을 remote repository로 업로드  원격저장소 추가  Remote Repo branch에서 데이터를 가져와 자동으로 local branch와 merge Commit 관련 Git 명령어 커밋 합치기  커밋 메세지 수정  간단한 commit방법   커밋 이력 확인    …","frontmatter":{"categories":"git","title":"Git 명령어 정리","date":"February 12, 2022"},"fields":{"slug":"/git-command-gather/"}}},{"node":{"id":"6d425db0-c753-5bb8-8120-4672154e8bea","excerpt":"이란 ? 팀장의 저장소를 해서 팀원마다 각자 저장소를 가지고 프로젝트를 진행하는 방식이다. 팀원의 작업 내용은 를 통해 팀장의 확인 후 반영된다. 팀장 저장소의 권한은 만 가지고 있으면서 다른 사람의 을 프로젝트에 적용이 가능하다. 팀장이 코드를 확인하고 하기 때문에 안전하게 협업이 가능하다. 오픈소스프로젝트에서 많이 사용하는 방식이다. 하기 1.  하기   타인 소유의(또는 공동 소유의) 프로젝트 소스와 commit 내역, branch 등 원본 Remote Repository의 구조를 그대로 복사하여 내 소유의 새로운 Remote Repository로 생성하는 기능이다.\nFork한 저장소는 내 소유이므로 내 마음대로 Source를 수정할 수 있다. 이때 Fork 저장소의 내용을 아무리 수정해도 원본 저장소엔 영향을 주지 않는다.따라서 Fork 저장소를 이용하면 Git 기능을 마음껏 활용하여 소스를 수정해볼 수 있으면서도 원본 Source에 대한 무분별한 수정을 막을 수 있다. 그…","frontmatter":{"categories":"git","title":"Git Forking Workflow 협업하기","date":"February 05, 2022"},"fields":{"slug":"/git-forking-workflow-collaborate/"}}},{"node":{"id":"2beeea05-826d-5f0c-960e-b73bcba1a62e","excerpt":"Git 협업 준비하기  등록 및 초대하기 협업 할 git repository에서 Settings 클릭하기 왼쪽 메뉴에서 Collaborators 클릭하기 github password 입력하기 Manage access에서 Add people 클릭하기 협업 할 동료 초대하기 collaborator 등록하면 모든 협업 동료들은  &  권한을 획득한다.  초대 확인하기 github에 등록한 메일 주소로 초대 메일 확인하여  클릭하기 Git 협업하기 1.  하기 2.  생성 &  이동 3. 작업 후 git , ,  하기 4. 에 병합 or  에 병합하기 는 최신 코드  &  용도로만 사용하는 것이 관리면에서 편하다.  이동할 때, 작업을 마무리하고 을 한 후 이동해야 한다. \n즉, 에 작업 내용이 있으면 이동이 안된다. 에 병합하기 github repository에 가서 pull requests 작성하고 팀원들에게 피드백 받기 팀원들이 피드백 후 merge 하기 5. 최신 버전 가져오기 +…","frontmatter":{"categories":"git","title":"Git 협업하기","date":"January 29, 2022"},"fields":{"slug":"/git-collaborate/"}}},{"node":{"id":"258b7fb8-e5f0-5849-9bb2-a860714db500","excerpt":"BEM의 기본 구조 BEM은 Block, Element, Modifier를 뜻한다. BEM은 어떤 목적인가에 따라 이름을 만든다. Blcok, Element, Modifier은  _ _ 와 - - 로 구분한다. 이름을 연결할때에는 -를 사용한다. header는 Block, naviagtion은 Element, navi-text는 Modifier가 됩니다. Block 재사용 가능한 기능적으로 독립적인 페이지 컴포넌트을 Block이라고 부른다. 또, Block은 Block으로 감쌀 수 있습니다. Element Element는 Block을 구성하는 단위이다. Block은 독립적인 형태인 반면, Element는 의존적인 형태이다. 자신이 속한 블럭 내에서만 의미를 가지기 때문에 블럭 안에서 떼어다 다른 데 쓸 수 없다. .search-form은 Block이, .search-form__input과 .search-form__button은 Element이다. Modifier Modifier는 …","frontmatter":{"categories":"css","title":"Css BEM 방식","date":"January 22, 2022"},"fields":{"slug":"/css-bem-method/"}}},{"node":{"id":"4b3fc4a7-b9c0-531b-89c4-905eb6336397","excerpt":"1. 자바스크립트 완벽 가이드  2. 프론트엔드 개발자를 위한 자바스크립트 프로그래밍  3. 모던 자바스크립트 Deep Dive  1. 자바스크립트 완벽 가이드 2. 프론트엔드 개발자를 위한 자바스크립트 프로그래밍 3. 모던 자바스크립트 Deep Dive","frontmatter":{"categories":"developer","title":"Frontend Developer 필독서","date":"January 15, 2022"},"fields":{"slug":"/frontend-developer-must-read/"}}},{"node":{"id":"f669f320-02a0-57f3-959b-792ad750147d","excerpt":"👋 나만의 blog 만들기 gatsby 테마로 github blog 만들기 netlify로 zoomkoding-gatsby-blog 만들기 🏃‍♀️ 로컬 환경에 블로그를 실행하기 위 명령어가 문제 없이 실행됐다면 http://localhost:8000에서 블로그를 확인하실 수 있습니다. ⚙️ 블로그 정보 바꾸기 에 있는 여러값들을 변경해줍니다. 1. 블로그 기본 정보 설정하기 2. 댓글 설정 블로그 글들에 댓글을 달 수 있길 원하신다면 utterances를 통해서 이를 설정하실 수 있습니다. 🦄 utterances 사용방법은 링크를 참고해주세요! 3. 글쓴이 정보 author에 입력하신 정보는 홈페이지와 about 페이지 상단에 있는 글쓴이를 소개하는 섹션인 bio에서 사용됩니다.\ndescription에 자신을 설명하는 문구들을 넣으면 애니메이션으로 보여지게 됩니다.\nbio 이미지는 에 원하시는 파일을 추가하고 파일의 이름을 thumbnail에 넣어주시면 됩니다. (gif 지원) 🤖 위에…","frontmatter":{"categories":"blog","title":"블로그 설정 & 글쓰기","date":"January 08, 2022"},"fields":{"slug":"/blog-setting-and-writing/"}}},{"node":{"id":"6f7b3c86-ddea-5d9f-a13f-9cdb7f4090ee","excerpt":"1. Repository 생성하기 GitHub에 로그인 후 우측 상단에 있는 New Repository 버튼을 클릭하면 repository 생성하기\n\n Import a repository 버튼을 클릭합니다\n\n 생성할 respository 정보 입력하기\n Your old repository’s clone URL에 사용할 gatsby 테마가 있는 repository 주소를 넣기 제 블로그 테마는 https://github.com/zoomKoding/zoomkoding.com입니다. Repository Name을 [GitHubID].github.io로 설정하기 Begin Import 버튼을 클릭하기 최종 repository 생성 결과\n 2. Repository 가져오기 및 블로그 배포 준비 Repository에서 초록색 Code 버튼을 클릭하면 링크가 나오게 되는데, 이 링크를 복사하기\n 아래 명령어를 수행하여 블로그를 다운로드합니다. Blog 설치하기 Blog 배포 준비하기 Gatsb…","frontmatter":{"categories":"blog","title":"Gatsby 테마로 GitHub Blog 만들기","date":"January 01, 2022"},"fields":{"slug":"/gatsby-theme-github-blog/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"정인권","bio":{"role":"개발자","description":["새로운 것을 두려워하지 않는","끊임없이 고민하는","함께 소통하며 성장하는","평생 학습하고 도전하는"],"thumbnail":"sample.png"},"social":{"github":"https://github.com/developjik","linkedIn":"https://www.linkedin.com/in/%EC%9D%B8%EA%B6%8C-%EC%A0%95-149303234/","email":"developjik@gmail.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}